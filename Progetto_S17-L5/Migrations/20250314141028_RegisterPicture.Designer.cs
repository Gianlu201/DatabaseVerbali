// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Progetto_S17_L5.Data;

#nullable disable

namespace Progetto_S17_L5.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250314141028_RegisterPicture")]
    partial class RegisterPicture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Progetto_S17_L5.Models.Register", b =>
                {
                    b.Property<Guid>("RegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CAP")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RegisterId");

                    b.ToTable("Registers");

                    b.HasData(
                        new
                        {
                            RegisterId = new Guid("ab4d17db-f1f7-431a-85b4-3278e4395024"),
                            Address = "Via Dante Alighieri 10",
                            CAP = "20100",
                            City = "Milano",
                            FiscalCode = "RSSGLI90A01F205X",
                            Name = "Giulia",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Rossi"
                        },
                        new
                        {
                            RegisterId = new Guid("b2490619-20b1-443f-a323-6e26e91e6f6e"),
                            Address = "Corso Italia 15",
                            CAP = "00100",
                            City = "Roma",
                            FiscalCode = "BNCMRC85M01H501Y",
                            Name = "Marco",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Bianchi"
                        },
                        new
                        {
                            RegisterId = new Guid("6ff4e02a-6164-45cd-92f9-7b9bdc57d7e0"),
                            Address = "Via Roma 25",
                            CAP = "10100",
                            City = "Torino",
                            FiscalCode = "VRDLSA72D55L219P",
                            Name = "Alessandra",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Verdi"
                        },
                        new
                        {
                            RegisterId = new Guid("5f39bed5-bf99-4599-ab34-85b5fff62417"),
                            Address = "Via Giuseppe Mazzini 40",
                            CAP = "50100",
                            City = "Firenze",
                            FiscalCode = "NRILCU85C01D612N",
                            Name = "Luca",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Neri"
                        },
                        new
                        {
                            RegisterId = new Guid("a4ebff23-952d-48bb-a65d-8da5e818c022"),
                            Address = "Piazza del Duomo 5",
                            CAP = "80100",
                            City = "Napoli",
                            FiscalCode = "GLLLRA90A01F839T",
                            Name = "Laura",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Gialli"
                        },
                        new
                        {
                            RegisterId = new Guid("59185603-5ee1-4ba0-89c4-94a2af575a82"),
                            Address = "Via San Petronio 22",
                            CAP = "40100",
                            City = "Bologna",
                            FiscalCode = "BLNDRE80B01L219W",
                            Name = "Andrea",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Blu"
                        },
                        new
                        {
                            RegisterId = new Guid("73f3ed80-c5de-4c4a-a87b-c39d692c1446"),
                            Address = "Via Libertà 30",
                            CAP = "90100",
                            City = "Palermo",
                            FiscalCode = "GRGSFA96C41H501D",
                            Name = "Sofia",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Grigi"
                        },
                        new
                        {
                            RegisterId = new Guid("f924db1a-29ce-4ddd-8e66-dc20394e1f34"),
                            Address = "Via Etnea 50",
                            CAP = "95100",
                            City = "Catania",
                            FiscalCode = "GLLPLA84M01H501Q",
                            Name = "Paolo",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Galli"
                        },
                        new
                        {
                            RegisterId = new Guid("64373dff-19fe-4f27-af81-f49f36501bae"),
                            Address = "Viale Giuseppe Mazzini 12",
                            CAP = "37100",
                            City = "Verona",
                            FiscalCode = "RNCMTN92A41F205X",
                            Name = "Martina",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Arancio"
                        },
                        new
                        {
                            RegisterId = new Guid("7380417d-9a44-4b1b-96fb-ff31488b5628"),
                            Address = "Via XX Settembre 60",
                            CAP = "16100",
                            City = "Genova",
                            FiscalCode = "MRNFRN75C01L219B",
                            Name = "Francesco",
                            Picture = "uploads\\images\\default.png",
                            Surname = "Marroni"
                        });
                });

            modelBuilder.Entity("Progetto_S17_L5.Models.Verbal", b =>
                {
                    b.Property<Guid>("VerbalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OfficerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PointsDeduction")
                        .HasColumnType("int");

                    b.Property<Guid>("RegisterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerbalAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("VerbalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VerbalTranscriptionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("VerbalId");

                    b.HasIndex("RegisterId");

                    b.ToTable("Verbals");
                });

            modelBuilder.Entity("Progetto_S17_L5.Models.VerbalViolation", b =>
                {
                    b.Property<Guid>("VerbalViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("VerbalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ViolationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VerbalViolationId");

                    b.HasIndex("VerbalId");

                    b.HasIndex("ViolationId");

                    b.ToTable("VerbalViolation");
                });

            modelBuilder.Entity("Progetto_S17_L5.Models.Violation", b =>
                {
                    b.Property<Guid>("ViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ViolationId");

                    b.ToTable("Violations");

                    b.HasData(
                        new
                        {
                            ViolationId = new Guid("6e253fbd-31b6-4e62-a74c-00679f0ab1c3"),
                            Description = "Eccesso di velocità: Multa per aver superato il limite di velocità di 20 km/h sulla Via Roma, zona residenziale. La velocità rilevata era di 80 km/h anziché 60 km/h, causando un rischio per pedoni e ciclisti"
                        },
                        new
                        {
                            ViolationId = new Guid("72024ee1-36c6-430c-958c-1082957e604b"),
                            Description = "Parcheggio in divieto di sosta: Sanzione per aver parcheggiato in zona a traffico limitato in Piazza del Duomo senza autorizzazione, ostruendo il passaggio di mezzi di emergenza"
                        },
                        new
                        {
                            ViolationId = new Guid("60093f5c-edb8-49b1-99f2-1e13729e5e54"),
                            Description = "Mancato uso delle cinture di sicurezza: Multa per non aver indossato la cintura di sicurezza durante il viaggio in autostrada. Il veicolo è stato fermato durante un controllo di routine"
                        },
                        new
                        {
                            ViolationId = new Guid("2cfb9f95-6198-4b88-879e-2ebd0aed733e"),
                            Description = "Guida con cellulare: Multa per l’utilizzo del cellulare durante la guida su Via Dante, creando potenziale distrazione e pericolo per gli altri automobilisti"
                        },
                        new
                        {
                            ViolationId = new Guid("1765429a-a462-44a9-a414-4facc897fd25"),
                            Description = "Soste abusive su strisce pedonali: Sanzione per aver parcheggiato il veicolo sopra le strisce pedonali in Corso Italia, impedendo il normale attraversamento dei pedoni"
                        },
                        new
                        {
                            ViolationId = new Guid("81bb9c8a-f85a-454b-be77-5c55e06bd552"),
                            Description = "Incrocio con semaforo rosso: Multa per aver attraversato un incrocio con semaforo rosso, violando il codice della strada e mettendo in pericolo la sicurezza stradale"
                        },
                        new
                        {
                            ViolationId = new Guid("29e939cc-f9ed-4f75-b751-6c4619015f76"),
                            Description = "Guida senza patente: Sanzione per guida senza patente di guida, accertata durante un controllo su Viale Giuseppe Mazzini. Il conducente non era in possesso di documenti validi"
                        },
                        new
                        {
                            ViolationId = new Guid("62c20d25-2140-4c65-96ca-74acbade17e7"),
                            Description = "Transito in area pedonale: Multa per aver circolato con il veicolo in area pedonale in Via Roma durante orario di divieto, mettendo a rischio la sicurezza dei pedoni"
                        },
                        new
                        {
                            ViolationId = new Guid("5b0c745f-5bb1-4ef5-89c8-83a4fe2e4ce1"),
                            Description = "Spostamento del veicolo durante una sosta vietata: Sanzione per aver spostato un veicolo durante una sosta vietata, creando ostacoli al traffico e rischi per la circolazione"
                        },
                        new
                        {
                            ViolationId = new Guid("227e7325-49ac-4100-9076-842a6d6a2841"),
                            Description = "Mancata revisione del veicolo: Multa per circolazione con un veicolo non revisionato, scaduto da oltre sei mesi. La mancata revisione compromette la sicurezza del mezzo e la protezione ambientale"
                        },
                        new
                        {
                            ViolationId = new Guid("aacd8366-9a9c-4e67-94dd-8ff43903ca74"),
                            Description = "Mancato rispetto della precedenza: Sanzione per non aver dato la precedenza al veicolo proveniente da destra su un incrocio non regolato da semaforo"
                        },
                        new
                        {
                            ViolationId = new Guid("b4c04a96-4912-46a9-a7c8-adf8f2c40c42"),
                            Description = "Uso improprio delle corsie: Multa per aver viaggiato sulla corsia di emergenza in autostrada per oltre 500 metri, senza necessità, ostacolando il passaggio dei veicoli di soccorso"
                        },
                        new
                        {
                            ViolationId = new Guid("db84a569-68f9-45c1-97d6-c9f3c1b18c55"),
                            Description = "Eccesso di velocità in zona scolastica: Sanzione per aver superato il limite di velocità di 30 km/h nella zona residenziale"
                        },
                        new
                        {
                            ViolationId = new Guid("5ab1bb60-b119-46fb-932b-d6b6dee293f7"),
                            Description = "Fermata in doppia fila: Multa per aver lasciato il veicolo in doppia fila"
                        },
                        new
                        {
                            ViolationId = new Guid("66d63944-5704-4e06-ae7a-f4f83f25844f"),
                            Description = "Guida sotto influenza di sostanze alcoliche"
                        },
                        new
                        {
                            ViolationId = new Guid("775dda4a-f46b-48d8-b05b-defaeb6da946"),
                            Description = "Mancato rispetto del limite di altezza: Sanzione per aver percorso un tunnel con un veicolo che superava altezza massima consentita di 3 metri"
                        },
                        new
                        {
                            ViolationId = new Guid("f50361c8-f1cf-4256-8c0a-e09bc3006dc3"),
                            Description = "Mancato fermo al posto di blocco: Multa per non essersi fermati a un posto di blocco della polizia"
                        },
                        new
                        {
                            ViolationId = new Guid("4f7e0aaa-3343-4aa8-b54c-e155df77770f"),
                            Description = "Violazione del divieto di transito: Sanzione per aver percorso un tratto di strada in cui il transito era vietato, ignorando il cartello di divieto"
                        },
                        new
                        {
                            ViolationId = new Guid("ce0c3bdd-3b8f-4c91-bbbc-ee6745b4f18c"),
                            Description = "Transito con veicolo non assicurato: Multa per circolazione con un veicolo privo di assicurazione obbligatoria"
                        },
                        new
                        {
                            ViolationId = new Guid("f956363c-9e19-47d4-9fae-ef7fe954fe76"),
                            Description = "Uso del veicolo per finalità diverse da quelle consentite: Sanzione per aver utilizzato un veicolo commerciale per trasporto di persone, violando le normative riguardanti il trasporto pubblico e la sicurezza stradale"
                        });
                });

            modelBuilder.Entity("Progetto_S17_L5.Models.Verbal", b =>
                {
                    b.HasOne("Progetto_S17_L5.Models.Register", "Register")
                        .WithMany("Verbals")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Register");
                });

            modelBuilder.Entity("Progetto_S17_L5.Models.VerbalViolation", b =>
                {
                    b.HasOne("Progetto_S17_L5.Models.Verbal", "Verbal")
                        .WithMany("VerbalViolations")
                        .HasForeignKey("VerbalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Progetto_S17_L5.Models.Violation", "Violation")
                        .WithMany("VerbalViolations")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Verbal");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("Progetto_S17_L5.Models.Register", b =>
                {
                    b.Navigation("Verbals");
                });

            modelBuilder.Entity("Progetto_S17_L5.Models.Verbal", b =>
                {
                    b.Navigation("VerbalViolations");
                });

            modelBuilder.Entity("Progetto_S17_L5.Models.Violation", b =>
                {
                    b.Navigation("VerbalViolations");
                });
#pragma warning restore 612, 618
        }
    }
}
